version: '3'

networks:
  redisnetwork:
    name: redisnetwork
  rabbitmqnetwork:
    name: rabbitmqnetwork
  sqldatabasenetwork:
    name: sqldatabasenetwork
  webnetwork:
    name: webnetwork

services:
  user.data:
    image: redis
    ports:
      - 6379:6379
    networks:
      - redisnetwork
      - webnetwork

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - 15672:15672
      - 5672:5672
    networks:
      - rabbitmqnetwork
      - webnetwork
    container_name: rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    
  web:
    image: web-app:dev 
    build:
      context: ./
      dockerfile: Web/Dockerfile
    ports: 
      - 8080:80
    networks:
      - webnetwork
    container_name: web.app
    depends_on:
      - applicants.api
      - identity.api
      - jobs.api
    restart: always

  applicants.api:
    image: applicants-api:dev
    environment:
      - ConnectionString=Server=sql.data;User=sa;Password=Pass@word;Database=dotnetgigs.applicants;
      - HostRabbitmq=rabbitmq
    build:
      context: ./
      dockerfile: Services/Applicants.Api/Dockerfile
    ports: 
      - 8081:80
    networks:
      - rabbitmqnetwork
      - sqldatabasenetwork
      - webnetwork
    container_name: applicants.api
    depends_on:
      - sql.data
      - rabbitmq
    restart: always

  jobs.api:
    image: jobs-api:dev
    environment:
      - ConnectionString=Server=sql.data;User=sa;Password=Pass@word;Database=dotnetgigs.jobs;
      - HostRabbitmq=rabbitmq 
    build:
      context: ./
      dockerfile: Services/Jobs.Api/Dockerfile
    ports: 
      - 8083:80
    networks:
      - rabbitmqnetwork
      - sqldatabasenetwork
      - webnetwork
    container_name: jobs.api
    depends_on:
      - sql.data
      - rabbitmq
    restart: always

  identity.api:
    image: identity-api:dev
    environment:
      - RedisHost=user.data:6379
      - HostRabbitmq=rabbitmq
    build:
      context: ./
      dockerfile: Services/Identity.Api/Dockerfile
    ports: 
      - 8084:80
    networks:
      - rabbitmqnetwork
      - redisnetwork
      - webnetwork
    container_name: identity.api
    depends_on:
      - user.data
      - rabbitmq       

  sql.data:
    image: database
    build:
      context: ./Database
      dockerfile: Dockerfile
    ports:
      - 1433:1433
    networks:
      - sqldatabasenetwork
      - webnetwork
    volumes:
      - sqldatabase:/data
    container_name: mssql-linux

volumes: 
  sqldatabase:
    driver: local
